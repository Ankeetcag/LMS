package com.cag.twowheeler.service.serviceimpl;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cag.twowheeler.dto.AllVehicleOem;
import com.cag.twowheeler.dto.InseartVehicle;
import com.cag.twowheeler.dto.VehicalsAllData;
import com.cag.twowheeler.entity.VehicalOem;
import com.cag.twowheeler.entity.VehicalPrice;
import com.cag.twowheeler.entity.VehicalType;
import com.cag.twowheeler.repository.VehicalOemRepository;
import com.cag.twowheeler.repository.VehicalPriceRepository;
import com.cag.twowheeler.repository.VehicalTypeRepository;
import com.cag.twowheeler.service.TwoWheelerService;

@Service
public class TwoWheelerServiceImpl implements TwoWheelerService {

	@Autowired
	private VehicalPriceRepository priceRepository;
	@Autowired
	private VehicalOemRepository oemRepositoryy;
	@Autowired
	private VehicalTypeRepository vehicalTypeRepository;

	@Override
	public double getPrice(String vehicalState, String vehicalType, String vehicalOem) {
		VehicalPrice vehicalprice = priceRepository.findByStateAndTypeVehicalTypeAndOemVehicalOem(vehicalState,
				vehicalType, vehicalOem);
		if (vehicalprice != null) {
			double vehicalPrice = vehicalprice.getVehicalPrice();
			return vehicalPrice;
		}
		return 0.0;
	}

	@Override
	public List<VehicalsAllData> getAllVehicalData() {
		List<VehicalPrice> getAllvehicalData = priceRepository.findAll();
		List<VehicalsAllData> vehicalsAllDatas = new ArrayList<>();
		getAllvehicalData.stream().forEach(e -> {
			VehicalsAllData vehical = new VehicalsAllData();
			vehical.setVehicleId(e.getVehicalPriceiD());
			vehical.setVehicalName(e.getType().getVehicalType());
			vehical.setVehicalOem(e.getOem().getVehicalOem());
			vehical.setVehicalprice(e.getVehicalPrice());
			vehical.setVehicalState(e.getState());
			vehicalsAllDatas.add(vehical);
		});
		// sorting Logic
		Comparator<VehicalsAllData> obj = new Comparator<VehicalsAllData>() {
			@Override
			public int compare(VehicalsAllData o1, VehicalsAllData o2) {
				return o1.getVehicalName().compareTo(o2.getVehicalName());
			}
		};
		// sorted list base on Vehicle Name
		List<VehicalsAllData> vehicalData = vehicalsAllDatas.stream().sorted(obj).collect(Collectors.toList());
		return vehicalData;
	}

	@Override
	public List<AllVehicleOem> getOem() {

		List<VehicalOem> vehicalOems = oemRepositoryy.findAll();
		System.out.println("+++++++++++++++++++++++" + vehicalOems);
		List<AllVehicleOem> oems = new ArrayList<>();
		vehicalOems.stream().forEach(e -> {
			AllVehicleOem oem = new AllVehicleOem();
			oem.setOemId(e.getVehicalOemid());
			oem.setOemName(e.getVehicalOem());
			oems.add(oem);
		});
		return oems;
	}

	@Override
	public Boolean editVehicleData(VehicalsAllData data, int id) {
		Optional<VehicalPrice> vehicle = priceRepository.findById(id);
		if (vehicle.isPresent()) {
			VehicalPrice v1 = vehicle.get();
			System.out.println("==================" + v1);
			v1.setVehicalPrice(data.getVehicalprice());
			v1.getType().setVehicalType(data.getVehicalName());
			v1.getOem().setVehicalOem(data.getVehicalOem());
			v1.setState(data.getVehicalState());
			System.out.println("+++++++++++++++++" + v1);
			priceRepository.save(v1);
			return true;
		}

		return false;
	}

	@Override
	public String deleteData(int id) {
		Optional<VehicalPrice> vehicle = priceRepository.findById(id);
		if (vehicle.isPresent()) {
			VehicalPrice vehicledata = vehicle.get();
			List<VehicalPrice> allData = priceRepository.findAll();
			long count = allData.stream()
					.filter(e -> e.getType().getVehicalType().equalsIgnoreCase(vehicledata.getType().getVehicalType()))
					.count();
			if (!(count > 1))
				priceRepository.delete(vehicledata);
			else {
				vehicledata.setType(null);
				priceRepository.save(vehicledata);
				priceRepository.delete(vehicledata);
			}
			return "Data Successfully Deleted";
		}

		return "not deleted";
	}

	@Override
	public String addVehicle(InseartVehicle vehicle) {

		List<VehicalType> allVehicle = vehicalTypeRepository.findAll();
		List<VehicalType> collect = allVehicle.stream()
				.filter(e -> e.getVehicalType().equalsIgnoreCase(vehicle.getVehicleName()))
				.collect(Collectors.toList());

		if (!collect.isEmpty()) {
			boolean anyMatch = collect.get(0).getVehical_Price().stream()
					.anyMatch(e -> e.getState().equalsIgnoreCase(vehicle.getVehicleState()));
			if (anyMatch)
				return "Vehical Alrady Exist with Given State";
			else {
				VehicalPrice newVehicalData = new VehicalPrice();
				newVehicalData.setState(vehicle.getVehicleState());
				newVehicalData.setOem(collect.get(0).getOem());
				newVehicalData.setVehicalPrice(vehicle.getVehilePrice());
				newVehicalData.setType(collect.get(0));
				priceRepository.save(newVehicalData);

				return "Existing Vehicle Data Add Successfully";
			}

		} else {
			List<VehicalOem> findByOemName = oemRepositoryy.findByVehicalOem(vehicle.getVehicleOem());
			VehicalType newVehicle = new VehicalType();
			newVehicle.setOem(findByOemName.get(0));
			newVehicle.setVehicalType(vehicle.getVehicleName());
			vehicalTypeRepository.save(newVehicle);

			VehicalPrice newVehicalPrice = new VehicalPrice();
			newVehicalPrice.setState(vehicle.getVehicleState());
			newVehicalPrice.setOem(findByOemName.get(0));
			newVehicalPrice.setVehicalPrice(vehicle.getVehilePrice());
			newVehicalPrice.setType(vehicalTypeRepository.findAll().stream()
					.filter(e -> e.getVehicalType().equalsIgnoreCase(vehicle.getVehicleName()))
					.collect(Collectors.toList()).get(0));
			priceRepository.save(newVehicalPrice);
			return "New Vehicle Data Add Successfully";
		}
	}

}
